// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  fone      String
  clerkId   String
  orders    Order[]    // Relacionamento de um para muitos
  addresses Address[]  // Relacionamento de um para muitos
}

model Address {
  id           Int      @id @default(autoincrement())
  street       String
  number       Int
  neighborhood String
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  orders       Order[]
}

model Order {
  id          Int               @id @default(autoincrement())
  orderDate   DateTime
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  addressId   Int
  address     Address           @relation(fields: [addressId], references: [id])
  totalAmount Float
  products    OrderProduct[]    // Relacionamento de muitos para muitos através de uma tabela intermediária
}

model OrderProduct {
  productId Int
  orderId   Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  @@id([productId, orderId])
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String
  cnpj      String
  fone      String
  email     String
  products  Product[] // Relacionamento de um para muitos
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float?
  quantity    Int         @default(1)
  image       String
  description String?
  supplierId  Int?
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])
  orders      OrderProduct[] // Relacionamento de muitos para muitos através de uma tabela intermediária
}